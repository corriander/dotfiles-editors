" NOTE: To source me, 
"
"   - :so %, or 
"   - :so $MYVIMRC
"   - :so $XDG_CONFIG_HOME/vim/vimrc
"
" Default anyway, but probably a good idea to explicitly...
set nocompatible
" Source - http://stackoverflow.com/a/5845583/2921610

" Environment
" ===========
"
" XDG Compatibility
" -----------------
"
" ### References
"
"   - http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables
"   - http://tlvince.com/vim-respect-xdg 
"   - https://gist.github.com/kaleb/3885679
"   - http://vim.wikia.com/wiki/Remove_swap_and_backup_files_from_your_working_directory
"
" ### Configure directories
"

if empty($XDG_CACHE_HOME)
  let $XDG_CACHE_HOME = $HOME . "/.cache"
endif
if empty($XDG_CONFIG_HOME)
  let $XDG_CONFIG_HOME = $HOME . "/.config"
endif

if !isdirectory($XDG_CACHE_HOME . "/vim/swap")
  call mkdir($XDG_CACHE_HOME . "/vim/swap", "p")
endif
set directory=$XDG_CACHE_HOME/vim/swap//,/var/tmp//,/tmp//

" No setup for backup files here, they aren't used.

" See :help persistent-undo
if !isdirectory($XDG_CACHE_HOME . "/vim/undo")
  call mkdir($XDG_CACHE_HOME . "/vim/undo", "p")
endif
set undodir=$XDG_CACHE_HOME/vim/undo//,/var/tmp//,/tmp//
set undofile

set viminfo+=n$XDG_CACHE_HOME/vim/viminfo

set runtimepath-=~/.vim
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath-=~/.vim/after
set runtimepath+=$XDG_CONFIG_HOME/vim/after

" Manage plugins automagically with T Pope's Pathogen:
execute pathogen#infect('vials-enabled/{}')
execute pathogen#helptags()
" Extra plugin folders can be appended with comma separation. Yes I
" gave it a dorky name.
" I wrote a script (~/.scripts/vials) to selectively apply plugins.
" I may consider shifting over to Vundle as it removes the need for my
" custom approach and means I don't need to git submodule...

syntax on
filetype plugin indent on

set textwidth=70
set tabstop=4
set shiftwidth=4

" Adjust default formatting options.
set formatoptions+=j				" Comment leader removal on join

" Enable Shift-Tab:
nmap <S-Tab> <<
imap <S-Tab> <Esc><<i
" Note: I don't have expandtab enabled, to convert a file to
" whitespace, :%retab 

" Make filename tab completion a bit like bash + cycle. You can append
" the 'full' option to this, but I find it unintuitive being used to
" the simpler readline autocompletion (which the following emulates).
set wildmode=longest,list
set wildmenu

" Set a coloured column to indicate desired text width.
" Source http://stackoverflow.com/a/3765575
if exists('+colorcolumn')
	set colorcolumn=+1					" textwidth+1
else
	" If no colorcolumn support (--version < 7.3) 
	au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" Visualisation
" -------------

" Commands
nmap <leader>l :set list!<CR>				" Shortcut to set list
nmap <leader>s :syntax sync fromstart<CR>	" Refresh syntax highlighting

set listchars=tab:»·,trail:·			" Whitespace (set list, \l)

let s:hostname = hostname()
if s:hostname =~ '^p'
	let g:jellybeans_term_trans = 1			" Transparent background
	colorscheme jellybeans
endif
if s:hostname =~ '^D'
	colorscheme fahrenheit
endif

" Configure LaTeX
let g:tex_flavor = 'latex'

" Configure vim-pandoc
" use_hard_wraps results in setlocal formatoption=tn in vim-pandoc
let g:pandoc_use_hard_wraps = 1
let g:pandoc_auto_format = 1
let g:pandoc#syntax#conceal#use = 0
" Default bibliography
"let g:pandoc_bibfiles = ['path/to.bib']

" Configure SimpylFold
" let g:SimpylFold_docstring_preview = 0	" This is a little verbose
" 											" for limited texwidth
" let g:SimpylFold_fold_docstring = 0		" Folding is annoying for
											" short docstrings, but a
											" good idea for long ones

" Configure ultisnips
let g:UltiSnipsSnippetDirectories = ['~/.config/vim/UltiSnips', 'UltiSnips']
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Setup triggers.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
nmap <leader><tab> :call UltiSnips#ListSnippets()<CR>

" Configure sessions/buffers/windows
" ----------------------------------
set autowrite			" Saves on buffer switching
map <c-j> <c-w>j		" Remap standard window nav to Ctrl+<movement>
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" Enable bash aliases
let $BASH_ENV = "~/.bash_aliases"

" Auto-fix trailing whitespace in certain filetypes on buffer write
" See: http://unix.stackexchange.com/a/75438
function! <SID>rStrip()
	let l = line(".")					" Save cursor x,y
	let c = col(".")					" 
	%s/\s\+$//e							" Remove trailing whitespace
	call cursor(l, c)					" Restore cursor
endfun
" Run the rStrip() function every time a buffer is written.
autocmd BufWritePre * if &ft =~ 'python' | call <SID>rStrip() | endif
" Note, I've chosen to do this on every buffer write because my config
" is likely to introduce whitespace during editing (e.g autoindent in
" python). If this were to be fixed, this could be relegated to an
" explicit command for one of occasions, which I'd actually prefer.

" Utility functions / shortcuts
" -----------------------------
" Shotcut to delete a buffer without closing the window.
nmap <leader>d :bp\|bd #<CR>

" Dump matched lines into a new buffer.
command! -nargs=? Filter let @a='' | execute 'g/<args>/y A' | new | setlocal bt=nofile | put! a

" Dump matched lines into a new buffer (preview first).
nmap <leader>f :redir @a<CR>:g//<CR>:redir END<CR>:new<CR>:put! a<CR>

